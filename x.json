{
  "name": "datasift",
  "description": "Datasift for ChiÏ‡",
  "version": "0.0.2",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/datasift.git"
  },
  "dependencies": {
    "datasift": "datasift/NodeJS-Consumer"
  },
  "nodes": [
    {
      "ports": {
        "input": {
          "username": {
            "title": "Username",
            "type": "string",
            "required": "true"
          },
          "api_key": {
            "title": "Api Key",
            "type": "string",
            "required": "true"
          },
          "connect": {
            "title": "Connect",
            "type": "function",
            "required": "false"
          },
          "error": {
            "title": "Error",
            "type": "function",
            "required": "false"
          },
          "warning": {
            "title": "Warning",
            "type": "function",
            "required": "false"
          },
          "disconnect": {
            "title": "Disconnect",
            "type": "function",
            "required": "false"
          },
          "interaction": {
            "title": "Interaction",
            "type": "function",
            "required": "false"
          },
          "delete": {
            "title": "Delete",
            "type": "function",
            "required": "false"
          }
        },
        "output": {
          "consumer": {
            "type": "function"
          }
        }
      },
      "require": {
        "datashift": "datashift/NodeJS-Consumer"
      },
      "phrases": {
        "active": "Connecting to datashift"
      },
      "description": "Connect to datashift",
      "title": "DataShift Connect",
      "ns": "datashift",
      "name": "connect",
      "fn": "var consumer = new datashift(input.username, input.api_key);\nconsumer.connect();\n\n//Emitted when stream is connected\nif(input.connect) consumer.on('connect', input.connect);\n\n//Emitted when there is an error\nif(input.error) consumer.on('error', input.error);\n\n//Emitted when there is a warning\nif(input.warning) consumer.on('warning', input.warning);\n\n//Emitted when disconnected\nif(iput.disconnect) consumer.on('disconnect', input.disconnect);\n\n//Emitted when an interaction is received\nif(input.interaction) consumer.on('interaction', input.interaction);\n\n//Emitted when a delete message is received\nif(input.delete) consumer.on('delete', input.delete);\n\noutput = {\n  consumer: consumer\n};\n"
    }
  ],
  "twigs": []
}